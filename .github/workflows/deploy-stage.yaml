name: Deploy Stage

on:
  workflow_call:
    inputs:
      app:
        type: string
        required: true
      environment:
        type: string
        required: true
      version:
        type: string
        required: true

concurrency:
  group: ${{ inputs.environment }}-${{ inputs.app }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    permissions:
      id-token: write
      contents: read

    steps:
    - name: Prepare vars
      id: vars
      run: |
        echo "Preparing variables"
        pipelineName=${{ secrets.project }}-${{ secrets.stage }}-${{ inputs.app }}
        echo "pipelineName=${pipelineName}" >> $GITHUB_OUTPUT

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1.7.0
      with:
        aws-region: ${{ secrets.aws_global_region }}
        role-session-name: deploy-stage-${{ secrets.stage }}
        role-to-assume: arn:aws:iam::${{ secrets.aws_account_id }}:role/${{ secrets.aws_ci_role_name }}
        role-duration-seconds: 3600

    - name: Upload deployment artifact to S3
      id: artifact
      run: |
        echo "Create deployment artifact for ${{ inputs.app }}:${{ inputs.version }}"
        echo ${{ inputs.version }} > ${{ inputs.app }}

        echo "Zip artifact"
        zip ${{ inputs.app }}.zip ${{ inputs.app }}

        echo "Upload artifact to s3 bucket"
        revision=$(aws s3api put-object \
          --body ${{ inputs.app }}.zip \
          --key ${{ inputs.app }}.zip \
          --bucket ${{ secrets.aws_artifacts_bucket }} \
          --query VersionId \
          --output text)

        echo "Artifact revision: $revision"
        echo "revision=${revision}" >> $GITHUB_OUTPUT

    - name: Start pipeline
      id: pipeline
      run: |
        echo "Start pipeline execution for ${{ steps.vars.outputs.pipelineName }}"
        executionId=$(aws codepipeline start-pipeline-execution \
          --name ${{ steps.vars.outputs.pipelineName }} \
          --query pipelineExecutionId --output text)

        echo "Started pipeline: ${{ steps.vars.outputs.pipelineName }} executionId: ${executionId}"
        echo "executionId=${executionId}" >> $GITHUB_OUTPUT

    - name: Validate pipeline execution source
      run: |
        echo "Waiting to avoid race conditions"
        sleep 5

        echo "Retrieving artifact revisionId of started execution"
        revision=$(aws codepipeline get-pipeline-execution \
          --pipeline-name ${{ steps.vars.outputs.pipelineName }} \
          --pipeline-execution-id ${{ steps.pipeline.outputs.executionId }} \
          --query 'pipelineExecution.artifactRevisions[0].revisionId' \
          --output text)

        echo "Pipeline execution source artifact revision: $revision, expected: ${{ steps.artifact.outputs.revision }}"

        if [ "$revision" != "${{ steps.artifact.outputs.revision }}" ]; then
          echo "Stopping pipeline execution"
          aws codepipeline stop-pipeline-execution \
            --pipeline-name ${{ steps.vars.outputs.pipelineName }} \
            --pipeline-execution-id ${{ steps.pipeline.outputs.executionId }} \
            --query pipelineExecutionId --output text \
            --reason "Unexpected source artifact revision id"
          exit 1
        fi

    - name: Monitor pipeline execution
      run: |
        echo "Waiting for pipeline execution"
        while true; do
          echo -n "pipeline execution status: "
          status=$(aws codepipeline get-pipeline-execution \
            --pipeline-name ${{ steps.vars.outputs.pipelineName }} \
            --pipeline-execution-id ${{ steps.pipeline.outputs.executionId }} \
            --query pipelineExecution.status --output text)

          echo -n $status
          if [ "$status" = "InProgress" -o "$status" = "Stopping" ]; then
            echo "; sleeping 5s..."
            sleep 5
            continue
          fi

          [ "$status" = "Succeeded" ]
          exit $?
        done

    - name: Stop pipeline execution
      if: ${{ cancelled() }}
      run: |
        echo "Stopping pipeline execution for ${{ steps.vars.outputs.pipelineName }}"
        aws codepipeline stop-pipeline-execution \
          --pipeline-name ${{ steps.vars.outputs.pipelineName }} \
          --pipeline-execution-id ${{ steps.pipeline.outputs.executionId }} \
          --reason "Unexpected source artifact revision id" || true
