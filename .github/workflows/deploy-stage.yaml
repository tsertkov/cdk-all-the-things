name: Deploy Stage

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
      version:
        type: string
        required: true

concurrency:
  group: ${{ inputs.environment }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    permissions:
      id-token: write
      contents: read

    steps:
    - name: Prepare vars
      id: vars
      run: |
        echo "Preparing variables"
        stateMachineName=${{ secrets.project }}-${{ secrets.stage }}-Deployer
        echo "stateMachineName=${stateMachineName}" >> $GITHUB_OUTPUT
        echo "stateMachineArn=arn:aws:states:${{ secrets.aws_global_region }}:${{ secrets.aws_account_id }}:stateMachine:${stateMachineName}" >> $GITHUB_OUTPUT

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1.7.0
      with:
        aws-region: ${{ secrets.aws_global_region }}
        role-session-name: deploy-stage-${{ secrets.stage }}
        role-to-assume: ${{ secrets.aws_ci_role_arn }}
        role-duration-seconds: 3600

    - name: Start deployment pipeline
      id: pipeline
      run: |
        echo "Start deployment pipeline ${{ steps.vars.outputs.stateMachineName }}"

        executionArn=$(aws stepfunctions start-execution \
          --state-machine-arn ${{ steps.vars.outputs.stateMachineArn }} \
          --input '{"version": "${{ inputs.version }}"}' \
          --query executionArn --output text)

        echo "Started pipeline: ${{ steps.vars.outputs.pipelineName }} executionArn: ${executionArn}"
        echo "executionArn=${executionArn}" >> $GITHUB_OUTPUT

    - name: Monitor pipeline execution
      run: |
        echo "Waiting for pipeline execution"
        while true; do
          echo -n "pipeline execution status: "
          status=$(aws stepfunctions describe-execution \
            --execution-arn ${{ steps.pipeline.outputs.executionArn }} \
            --query status --output text)

          echo -n $status
          if [ "$status" = "RUNNING" ]; then
            echo "; sleeping 5s..."
            sleep 5
            continue
          fi

          [ "$status" = "SUCCEEDED" ]
          exit $?
        done

    - name: Stop pipeline execution
      if: ${{ cancelled() }}
      run: |
        echo "Stopping pipeline execution for ${{ steps.vars.outputs.stateMachineName }}"
        aws stepfunctions stop-execution \
          --execution-arn ${{ steps.pipeline.outputs.executionArn }} \
          --cause "Cancelled manually in CICD"
